// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/clarifai/api/status/status.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:clarifai.api.status.Status)
pub struct Status {
    // message fields
    ///  Status code from internal codes.
    // @@protoc_insertion_point(field:clarifai.api.status.Status.code)
    pub code: ::protobuf::EnumOrUnknown<super::status_code::StatusCode>,
    ///  A longer description of the error.
    // @@protoc_insertion_point(field:clarifai.api.status.Status.description)
    pub description: ::std::string::String,
    ///  More details of the given error.
    // @@protoc_insertion_point(field:clarifai.api.status.Status.details)
    pub details: ::std::string::String,
    ///  For some environment we may return a stack trace to help debug
    ///  any issues.
    // @@protoc_insertion_point(field:clarifai.api.status.Status.stack_trace)
    pub stack_trace: ::std::vec::Vec<::std::string::String>,
    ///  specifically for long running jobs
    // @@protoc_insertion_point(field:clarifai.api.status.Status.percent_completed)
    pub percent_completed: u32,
    ///  if status is pending, how much time is remaining (in seconds)
    // @@protoc_insertion_point(field:clarifai.api.status.Status.time_remaining)
    pub time_remaining: u32,
    ///  If we want to return a request id in the base status field
    // @@protoc_insertion_point(field:clarifai.api.status.Status.req_id)
    pub req_id: ::std::string::String,
    ///  Internal Annotation (do not set in production, for internal Clarifai use only).
    // @@protoc_insertion_point(field:clarifai.api.status.Status.internal_details)
    pub internal_details: ::std::string::String,
    ///  Resource location info for redirect, when resource location has been changed.
    // @@protoc_insertion_point(field:clarifai.api.status.Status.redirect_info)
    pub redirect_info: ::protobuf::MessageField<RedirectInfo>,
    // special fields
    // @@protoc_insertion_point(special_field:clarifai.api.status.Status.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "code",
            |m: &Status| { &m.code },
            |m: &mut Status| { &mut m.code },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "description",
            |m: &Status| { &m.description },
            |m: &mut Status| { &mut m.description },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "details",
            |m: &Status| { &m.details },
            |m: &mut Status| { &mut m.details },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "stack_trace",
            |m: &Status| { &m.stack_trace },
            |m: &mut Status| { &mut m.stack_trace },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "percent_completed",
            |m: &Status| { &m.percent_completed },
            |m: &mut Status| { &mut m.percent_completed },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "time_remaining",
            |m: &Status| { &m.time_remaining },
            |m: &mut Status| { &mut m.time_remaining },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "req_id",
            |m: &Status| { &m.req_id },
            |m: &mut Status| { &mut m.req_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "internal_details",
            |m: &Status| { &m.internal_details },
            |m: &mut Status| { &mut m.internal_details },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, RedirectInfo>(
            "redirect_info",
            |m: &Status| { &m.redirect_info },
            |m: &mut Status| { &mut m.redirect_info },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Status>(
            "Status",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Status {
    const NAME: &'static str = "Status";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.code = is.read_enum_or_unknown()?;
                },
                18 => {
                    self.description = is.read_string()?;
                },
                26 => {
                    self.details = is.read_string()?;
                },
                34 => {
                    self.stack_trace.push(is.read_string()?);
                },
                40 => {
                    self.percent_completed = is.read_uint32()?;
                },
                48 => {
                    self.time_remaining = is.read_uint32()?;
                },
                58 => {
                    self.req_id = is.read_string()?;
                },
                66 => {
                    self.internal_details = is.read_string()?;
                },
                74 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.redirect_info)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.code != ::protobuf::EnumOrUnknown::new(super::status_code::StatusCode::ZERO) {
            my_size += ::protobuf::rt::int32_size(1, self.code.value());
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.details.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.details);
        }
        for value in &self.stack_trace {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.percent_completed != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.percent_completed);
        }
        if self.time_remaining != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.time_remaining);
        }
        if !self.req_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.req_id);
        }
        if !self.internal_details.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.internal_details);
        }
        if let Some(v) = self.redirect_info.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.code != ::protobuf::EnumOrUnknown::new(super::status_code::StatusCode::ZERO) {
            os.write_enum(1, ::protobuf::EnumOrUnknown::value(&self.code))?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.details.is_empty() {
            os.write_string(3, &self.details)?;
        }
        for v in &self.stack_trace {
            os.write_string(4, &v)?;
        };
        if self.percent_completed != 0 {
            os.write_uint32(5, self.percent_completed)?;
        }
        if self.time_remaining != 0 {
            os.write_uint32(6, self.time_remaining)?;
        }
        if !self.req_id.is_empty() {
            os.write_string(7, &self.req_id)?;
        }
        if !self.internal_details.is_empty() {
            os.write_string(8, &self.internal_details)?;
        }
        if let Some(v) = self.redirect_info.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Status {
        Status::new()
    }

    fn clear(&mut self) {
        self.code = ::protobuf::EnumOrUnknown::new(super::status_code::StatusCode::ZERO);
        self.description.clear();
        self.details.clear();
        self.stack_trace.clear();
        self.percent_completed = 0;
        self.time_remaining = 0;
        self.req_id.clear();
        self.internal_details.clear();
        self.redirect_info.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Status {
        static instance: Status = Status {
            code: ::protobuf::EnumOrUnknown::from_i32(0),
            description: ::std::string::String::new(),
            details: ::std::string::String::new(),
            stack_trace: ::std::vec::Vec::new(),
            percent_completed: 0,
            time_remaining: 0,
            req_id: ::std::string::String::new(),
            internal_details: ::std::string::String::new(),
            redirect_info: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Status {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Status").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:clarifai.api.status.RedirectInfo)
pub struct RedirectInfo {
    // message fields
    ///  New location for the resource. Used to set response Location header.
    // @@protoc_insertion_point(field:clarifai.api.status.RedirectInfo.url)
    pub url: ::std::string::String,
    ///  Resource type
    // @@protoc_insertion_point(field:clarifai.api.status.RedirectInfo.resource_type)
    pub resource_type: ::std::string::String,
    ///  Old resource id
    // @@protoc_insertion_point(field:clarifai.api.status.RedirectInfo.old_resource_id)
    pub old_resource_id: ::std::string::String,
    ///  New resource id
    // @@protoc_insertion_point(field:clarifai.api.status.RedirectInfo.new_resource_id)
    pub new_resource_id: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:clarifai.api.status.RedirectInfo.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a RedirectInfo {
    fn default() -> &'a RedirectInfo {
        <RedirectInfo as ::protobuf::Message>::default_instance()
    }
}

impl RedirectInfo {
    pub fn new() -> RedirectInfo {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(4);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "url",
            |m: &RedirectInfo| { &m.url },
            |m: &mut RedirectInfo| { &mut m.url },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "resource_type",
            |m: &RedirectInfo| { &m.resource_type },
            |m: &mut RedirectInfo| { &mut m.resource_type },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "old_resource_id",
            |m: &RedirectInfo| { &m.old_resource_id },
            |m: &mut RedirectInfo| { &mut m.old_resource_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "new_resource_id",
            |m: &RedirectInfo| { &m.new_resource_id },
            |m: &mut RedirectInfo| { &mut m.new_resource_id },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<RedirectInfo>(
            "RedirectInfo",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for RedirectInfo {
    const NAME: &'static str = "RedirectInfo";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.url = is.read_string()?;
                },
                18 => {
                    self.resource_type = is.read_string()?;
                },
                26 => {
                    self.old_resource_id = is.read_string()?;
                },
                34 => {
                    self.new_resource_id = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.url.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.url);
        }
        if !self.resource_type.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.resource_type);
        }
        if !self.old_resource_id.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.old_resource_id);
        }
        if !self.new_resource_id.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.new_resource_id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.url.is_empty() {
            os.write_string(1, &self.url)?;
        }
        if !self.resource_type.is_empty() {
            os.write_string(2, &self.resource_type)?;
        }
        if !self.old_resource_id.is_empty() {
            os.write_string(3, &self.old_resource_id)?;
        }
        if !self.new_resource_id.is_empty() {
            os.write_string(4, &self.new_resource_id)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> RedirectInfo {
        RedirectInfo::new()
    }

    fn clear(&mut self) {
        self.url.clear();
        self.resource_type.clear();
        self.old_resource_id.clear();
        self.new_resource_id.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static RedirectInfo {
        static instance: RedirectInfo = RedirectInfo {
            url: ::std::string::String::new(),
            resource_type: ::std::string::String::new(),
            old_resource_id: ::std::string::String::new(),
            new_resource_id: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for RedirectInfo {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("RedirectInfo").unwrap()).clone()
    }
}

impl ::std::fmt::Display for RedirectInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RedirectInfo {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

///  Base message to return when there is a internal server error that
///  is not caught elsewhere.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:clarifai.api.status.BaseResponse)
pub struct BaseResponse {
    // message fields
    // @@protoc_insertion_point(field:clarifai.api.status.BaseResponse.status)
    pub status: ::protobuf::MessageField<Status>,
    // special fields
    // @@protoc_insertion_point(special_field:clarifai.api.status.BaseResponse.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseResponse {
    fn default() -> &'a BaseResponse {
        <BaseResponse as ::protobuf::Message>::default_instance()
    }
}

impl BaseResponse {
    pub fn new() -> BaseResponse {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Status>(
            "status",
            |m: &BaseResponse| { &m.status },
            |m: &mut BaseResponse| { &mut m.status },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseResponse>(
            "BaseResponse",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseResponse {
    const NAME: &'static str = "BaseResponse";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.status)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.status.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseResponse {
        BaseResponse::new()
    }

    fn clear(&mut self) {
        self.status.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseResponse {
        static instance: BaseResponse = BaseResponse {
            status: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseResponse {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseResponse").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseResponse {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&proto/clarifai/api/status/status.proto\x12\x13clarifai.api.status\x1a\
    (proto/clarifai/auth/util/extension.proto\x1a+proto/clarifai/api/status/\
    status_code.proto\"\x8a\x03\n\x06Status\x123\n\x04code\x18\x01\x20\x01(\
    \x0e2\x1f.clarifai.api.status.StatusCodeR\x04code\x12\x20\n\x0bdescripti\
    on\x18\x02\x20\x01(\tR\x0bdescription\x12\x18\n\x07details\x18\x03\x20\
    \x01(\tR\x07details\x12%\n\x0bstack_trace\x18\x04\x20\x03(\tR\nstackTrac\
    eB\x04\x80\x9c'\x01\x12+\n\x11percent_completed\x18\x05\x20\x01(\rR\x10p\
    ercentCompleted\x12%\n\x0etime_remaining\x18\x06\x20\x01(\rR\rtimeRemain\
    ing\x12\x15\n\x06req_id\x18\x07\x20\x01(\tR\x05reqId\x12/\n\x10internal_\
    details\x18\x08\x20\x01(\tR\x0finternalDetailsB\x04\x80\x9c'\x01\x12L\n\
    \rredirect_info\x18\t\x20\x01(\x0b2!.clarifai.api.status.RedirectInfoR\
    \x0credirectInfoB\x04\x80\x9c'\x01\"\x95\x01\n\x0cRedirectInfo\x12\x10\n\
    \x03url\x18\x01\x20\x01(\tR\x03url\x12#\n\rresource_type\x18\x02\x20\x01\
    (\tR\x0cresourceType\x12&\n\x0fold_resource_id\x18\x03\x20\x01(\tR\roldR\
    esourceId\x12&\n\x0fnew_resource_id\x18\x04\x20\x01(\tR\rnewResourceId\"\
    C\n\x0cBaseResponse\x123\n\x06status\x18\x01\x20\x01(\x0b2\x1b.clarifai.\
    api.status.StatusR\x06statusBg\n\x1ccom.clarifai.grpc.api.statusP\x01Z>g\
    ithub.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status\xa2\x02\
    \x04CAIPJ\x9f\x0e\n\x06\x12\x04\0\01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\
    \n\t\n\x02\x03\0\x12\x03\x02\02\n\t\n\x02\x03\x01\x12\x03\x03\05\n\x08\n\
    \x01\x02\x12\x03\x05\0\x1c\n\x08\n\x01\x08\x12\x03\x07\0U\n\t\n\x02\x08\
    \x0b\x12\x03\x07\0U\n\x08\n\x01\x08\x12\x03\x08\0\"\n\t\n\x02\x08\n\x12\
    \x03\x08\0\"\n\x08\n\x01\x08\x12\x03\t\05\n\t\n\x02\x08\x01\x12\x03\t\05\
    \n\x08\n\x01\x08\x12\x03\n\0\"\n\t\n\x02\x08$\x12\x03\n\0\"\n\n\n\x02\
    \x04\0\x12\x04\x0c\0\x20\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x0e\n/\
    \n\x04\x04\0\x02\0\x12\x03\x0e\x02\x16\x1a\"\x20Status\x20code\x20from\
    \x20internal\x20codes.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x02\x0c\
    \n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\r\x11\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x0e\x14\x15\n1\n\x04\x04\0\x02\x01\x12\x03\x10\x02\x19\x1a$\
    \x20A\x20longer\x20description\x20of\x20the\x20error.\n\n\x0c\n\x05\x04\
    \0\x02\x01\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x10\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10\x17\x18\n/\n\x04\
    \x04\0\x02\x02\x12\x03\x12\x02\x15\x1a\"\x20More\x20details\x20of\x20the\
    \x20given\x20error.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\t\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x12\x13\x14\nZ\n\x04\x04\0\x02\x03\x12\x03\x15\x02Q\x1a\
    M\x20For\x20some\x20environment\x20we\x20may\x20return\x20a\x20stack\x20\
    trace\x20to\x20help\x20debug\n\x20any\x20issues.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x15\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x15\x12\x1d\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x15\x20!\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x15\
    \"P\n\x0f\n\x08\x04\0\x02\x03\x08\xc0\xf3\x04\x12\x03\x15#O\n1\n\x04\x04\
    \0\x02\x04\x12\x03\x17\x02\x1f\x1a$\x20specifically\x20for\x20long\x20ru\
    nning\x20jobs\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x17\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03\x17\t\x1a\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x17\x1d\x1e\nL\n\x04\x04\0\x02\x05\x12\x03\x19\x02\x1c\x1a?\x20\
    if\x20status\x20is\x20pending,\x20how\x20much\x20time\x20is\x20remaining\
    \x20(in\x20seconds)\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x19\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x19\t\x17\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x19\x1a\x1b\nI\n\x04\x04\0\x02\x06\x12\x03\x1b\x02\x14\
    \x1a<\x20If\x20we\x20want\x20to\x20return\x20a\x20request\x20id\x20in\
    \x20the\x20base\x20status\x20field\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1b\t\x0f\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03\x1b\x12\x13\n^\n\x04\x04\0\x02\x07\x12\
    \x03\x1d\x02M\x1aQ\x20Internal\x20Annotation\x20(do\x20not\x20set\x20in\
    \x20production,\x20for\x20internal\x20Clarifai\x20use\x20only).\n\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x1d\t\x19\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1d\x1c\x1d\
    \n\x0c\n\x05\x04\0\x02\x07\x08\x12\x03\x1d\x1eL\n\x0f\n\x08\x04\0\x02\
    \x07\x08\xc0\xf3\x04\x12\x03\x1d\x1fK\n\\\n\x04\x04\0\x02\x08\x12\x03\
    \x1f\x02P\x1aO\x20Resource\x20location\x20info\x20for\x20redirect,\x20wh\
    en\x20resource\x20location\x20has\x20been\x20changed.\n\n\x0c\n\x05\x04\
    \0\x02\x08\x06\x12\x03\x1f\x02\x0e\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\
    \x1f\x0f\x1c\n\x0c\n\x05\x04\0\x02\x08\x03\x12\x03\x1f\x1f\x20\n\x0c\n\
    \x05\x04\0\x02\x08\x08\x12\x03\x1f!O\n\x0f\n\x08\x04\0\x02\x08\x08\xc0\
    \xf3\x04\x12\x03\x1f\"N\n\n\n\x02\x04\x01\x12\x04\"\0+\x01\n\n\n\x03\x04\
    \x01\x01\x12\x03\"\x08\x14\nS\n\x04\x04\x01\x02\0\x12\x03$\x02\x11\x1aF\
    \x20New\x20location\x20for\x20the\x20resource.\x20Used\x20to\x20set\x20r\
    esponse\x20Location\x20header.\n\n\x0c\n\x05\x04\x01\x02\0\x05\x12\x03$\
    \x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03$\t\x0c\n\x0c\n\x05\x04\
    \x01\x02\0\x03\x12\x03$\x0f\x10\n\x1c\n\x04\x04\x01\x02\x01\x12\x03&\x02\
    \x1b\x1a\x0f\x20Resource\x20type\n\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\
    \x03&\x02\x08\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03&\t\x16\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03&\x19\x1a\n\x1e\n\x04\x04\x01\x02\x02\x12\
    \x03(\x02\x1d\x1a\x11\x20Old\x20resource\x20id\n\n\x0c\n\x05\x04\x01\x02\
    \x02\x05\x12\x03(\x02\x08\n\x0c\n\x05\x04\x01\x02\x02\x01\x12\x03(\t\x18\
    \n\x0c\n\x05\x04\x01\x02\x02\x03\x12\x03(\x1b\x1c\n\x1e\n\x04\x04\x01\
    \x02\x03\x12\x03*\x02\x1d\x1a\x11\x20New\x20resource\x20id\n\n\x0c\n\x05\
    \x04\x01\x02\x03\x05\x12\x03*\x02\x08\n\x0c\n\x05\x04\x01\x02\x03\x01\
    \x12\x03*\t\x18\n\x0c\n\x05\x04\x01\x02\x03\x03\x12\x03*\x1b\x1c\ni\n\
    \x02\x04\x02\x12\x04/\01\x01\x1a]\x20Base\x20message\x20to\x20return\x20\
    when\x20there\x20is\x20a\x20internal\x20server\x20error\x20that\n\x20is\
    \x20not\x20caught\x20elsewhere.\n\n\n\n\x03\x04\x02\x01\x12\x03/\x08\x14\
    \n\x0b\n\x04\x04\x02\x02\0\x12\x030\x02\x14\n\x0c\n\x05\x04\x02\x02\0\
    \x06\x12\x030\x02\x08\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x030\t\x0f\n\x0c\
    \n\x05\x04\x02\x02\0\x03\x12\x030\x12\x13b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(2);
            deps.push(super::extension::file_descriptor().clone());
            deps.push(super::status_code::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(3);
            messages.push(Status::generated_message_descriptor_data());
            messages.push(RedirectInfo::generated_message_descriptor_data());
            messages.push(BaseResponse::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
