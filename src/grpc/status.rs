// This file is generated by rust-protobuf 2.20.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/clarifai/api/status/status.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_20_0;

#[derive(PartialEq,Clone,Default)]
pub struct Status {
    // message fields
    pub code: super::status_code::StatusCode,
    pub description: ::std::string::String,
    pub details: ::std::string::String,
    pub stack_trace: ::protobuf::RepeatedField<::std::string::String>,
    pub percent_completed: u32,
    pub time_remaining: u32,
    pub req_id: ::std::string::String,
    pub internal_details: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Status {
    fn default() -> &'a Status {
        <Status as ::protobuf::Message>::default_instance()
    }
}

impl Status {
    pub fn new() -> Status {
        ::std::default::Default::default()
    }

    // .clarifai.api.status.StatusCode code = 1;


    pub fn get_code(&self) -> super::status_code::StatusCode {
        self.code
    }
    pub fn clear_code(&mut self) {
        self.code = super::status_code::StatusCode::ZERO;
    }

    // Param is passed by value, moved
    pub fn set_code(&mut self, v: super::status_code::StatusCode) {
        self.code = v;
    }

    // string description = 2;


    pub fn get_description(&self) -> &str {
        &self.description
    }
    pub fn clear_description(&mut self) {
        self.description.clear();
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::std::string::String) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::std::string::String {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.description, ::std::string::String::new())
    }

    // string details = 3;


    pub fn get_details(&self) -> &str {
        &self.details
    }
    pub fn clear_details(&mut self) {
        self.details.clear();
    }

    // Param is passed by value, moved
    pub fn set_details(&mut self, v: ::std::string::String) {
        self.details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_details(&mut self) -> &mut ::std::string::String {
        &mut self.details
    }

    // Take field
    pub fn take_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.details, ::std::string::String::new())
    }

    // repeated string stack_trace = 4;


    pub fn get_stack_trace(&self) -> &[::std::string::String] {
        &self.stack_trace
    }
    pub fn clear_stack_trace(&mut self) {
        self.stack_trace.clear();
    }

    // Param is passed by value, moved
    pub fn set_stack_trace(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.stack_trace = v;
    }

    // Mutable pointer to the field.
    pub fn mut_stack_trace(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.stack_trace
    }

    // Take field
    pub fn take_stack_trace(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.stack_trace, ::protobuf::RepeatedField::new())
    }

    // uint32 percent_completed = 5;


    pub fn get_percent_completed(&self) -> u32 {
        self.percent_completed
    }
    pub fn clear_percent_completed(&mut self) {
        self.percent_completed = 0;
    }

    // Param is passed by value, moved
    pub fn set_percent_completed(&mut self, v: u32) {
        self.percent_completed = v;
    }

    // uint32 time_remaining = 6;


    pub fn get_time_remaining(&self) -> u32 {
        self.time_remaining
    }
    pub fn clear_time_remaining(&mut self) {
        self.time_remaining = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_remaining(&mut self, v: u32) {
        self.time_remaining = v;
    }

    // string req_id = 7;


    pub fn get_req_id(&self) -> &str {
        &self.req_id
    }
    pub fn clear_req_id(&mut self) {
        self.req_id.clear();
    }

    // Param is passed by value, moved
    pub fn set_req_id(&mut self, v: ::std::string::String) {
        self.req_id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_req_id(&mut self) -> &mut ::std::string::String {
        &mut self.req_id
    }

    // Take field
    pub fn take_req_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.req_id, ::std::string::String::new())
    }

    // string internal_details = 8;


    pub fn get_internal_details(&self) -> &str {
        &self.internal_details
    }
    pub fn clear_internal_details(&mut self) {
        self.internal_details.clear();
    }

    // Param is passed by value, moved
    pub fn set_internal_details(&mut self, v: ::std::string::String) {
        self.internal_details = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_internal_details(&mut self) -> &mut ::std::string::String {
        &mut self.internal_details
    }

    // Take field
    pub fn take_internal_details(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.internal_details, ::std::string::String::new())
    }
}

impl ::protobuf::Message for Status {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.code, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.details)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.stack_trace)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.percent_completed = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time_remaining = tmp;
                },
                7 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.req_id)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.internal_details)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.code != super::status_code::StatusCode::ZERO {
            my_size += ::protobuf::rt::enum_size(1, self.code);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        if !self.details.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.details);
        }
        for value in &self.stack_trace {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        if self.percent_completed != 0 {
            my_size += ::protobuf::rt::value_size(5, self.percent_completed, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.time_remaining != 0 {
            my_size += ::protobuf::rt::value_size(6, self.time_remaining, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.req_id.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.req_id);
        }
        if !self.internal_details.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.internal_details);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.code != super::status_code::StatusCode::ZERO {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.code))?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        if !self.details.is_empty() {
            os.write_string(3, &self.details)?;
        }
        for v in &self.stack_trace {
            os.write_string(4, &v)?;
        };
        if self.percent_completed != 0 {
            os.write_uint32(5, self.percent_completed)?;
        }
        if self.time_remaining != 0 {
            os.write_uint32(6, self.time_remaining)?;
        }
        if !self.req_id.is_empty() {
            os.write_string(7, &self.req_id)?;
        }
        if !self.internal_details.is_empty() {
            os.write_string(8, &self.internal_details)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Status {
        Status::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<super::status_code::StatusCode>>(
                "code",
                |m: &Status| { &m.code },
                |m: &mut Status| { &mut m.code },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "description",
                |m: &Status| { &m.description },
                |m: &mut Status| { &mut m.description },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "details",
                |m: &Status| { &m.details },
                |m: &mut Status| { &mut m.details },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "stack_trace",
                |m: &Status| { &m.stack_trace },
                |m: &mut Status| { &mut m.stack_trace },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "percent_completed",
                |m: &Status| { &m.percent_completed },
                |m: &mut Status| { &mut m.percent_completed },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time_remaining",
                |m: &Status| { &m.time_remaining },
                |m: &mut Status| { &mut m.time_remaining },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "req_id",
                |m: &Status| { &m.req_id },
                |m: &mut Status| { &mut m.req_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "internal_details",
                |m: &Status| { &m.internal_details },
                |m: &mut Status| { &mut m.internal_details },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Status>(
                "Status",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Status {
        static instance: ::protobuf::rt::LazyV2<Status> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Status::new)
    }
}

impl ::protobuf::Clear for Status {
    fn clear(&mut self) {
        self.code = super::status_code::StatusCode::ZERO;
        self.description.clear();
        self.details.clear();
        self.stack_trace.clear();
        self.percent_completed = 0;
        self.time_remaining = 0;
        self.req_id.clear();
        self.internal_details.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Status {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Status {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct BaseResponse {
    // message fields
    pub status: ::protobuf::SingularPtrField<Status>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a BaseResponse {
    fn default() -> &'a BaseResponse {
        <BaseResponse as ::protobuf::Message>::default_instance()
    }
}

impl BaseResponse {
    pub fn new() -> BaseResponse {
        ::std::default::Default::default()
    }

    // .clarifai.api.status.Status status = 1;


    pub fn get_status(&self) -> &Status {
        self.status.as_ref().unwrap_or_else(|| <Status as ::protobuf::Message>::default_instance())
    }
    pub fn clear_status(&mut self) {
        self.status.clear();
    }

    pub fn has_status(&self) -> bool {
        self.status.is_some()
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: Status) {
        self.status = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status(&mut self) -> &mut Status {
        if self.status.is_none() {
            self.status.set_default();
        }
        self.status.as_mut().unwrap()
    }

    // Take field
    pub fn take_status(&mut self) -> Status {
        self.status.take().unwrap_or_else(|| Status::new())
    }
}

impl ::protobuf::Message for BaseResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.status {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.status)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.status.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.status.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> BaseResponse {
        BaseResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Status>>(
                "status",
                |m: &BaseResponse| { &m.status },
                |m: &mut BaseResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<BaseResponse>(
                "BaseResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static BaseResponse {
        static instance: ::protobuf::rt::LazyV2<BaseResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(BaseResponse::new)
    }
}

impl ::protobuf::Clear for BaseResponse {
    fn clear(&mut self) {
        self.status.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for BaseResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n&proto/clarifai/api/status/status.proto\x12\x13clarifai.api.status\x1a\
    (proto/clarifai/auth/util/extension.proto\x1a+proto/clarifai/api/status/\
    status_code.proto\"\xbc\x02\n\x06Status\x123\n\x04code\x18\x01\x20\x01(\
    \x0e2\x1f.clarifai.api.status.StatusCodeR\x04code\x12\x20\n\x0bdescripti\
    on\x18\x02\x20\x01(\tR\x0bdescription\x12\x18\n\x07details\x18\x03\x20\
    \x01(\tR\x07details\x12%\n\x0bstack_trace\x18\x04\x20\x03(\tR\nstackTrac\
    eB\x04\x80\x9c'\x01\x12+\n\x11percent_completed\x18\x05\x20\x01(\rR\x10p\
    ercentCompleted\x12%\n\x0etime_remaining\x18\x06\x20\x01(\rR\rtimeRemain\
    ing\x12\x15\n\x06req_id\x18\x07\x20\x01(\tR\x05reqId\x12/\n\x10internal_\
    details\x18\x08\x20\x01(\tR\x0finternalDetailsB\x04\x80\x9c'\x01\"C\n\
    \x0cBaseResponse\x123\n\x06status\x18\x01\x20\x01(\x0b2\x1b.clarifai.api\
    .status.StatusR\x06statusBg\n\x1ccom.clarifai.grpc.api.statusP\x01Z>gith\
    ub.com/Clarifai/clarifai-go-grpc/proto/clarifai/api/status\xa2\x02\x04CA\
    IPJ\x85\n\n\x06\x12\x04\0\0$\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\
    \x02\x03\0\x12\x03\x02\02\n\t\n\x02\x03\x01\x12\x03\x03\05\n\x08\n\x01\
    \x02\x12\x03\x05\0\x1c\n\x08\n\x01\x08\x12\x03\x07\0U\n\t\n\x02\x08\x0b\
    \x12\x03\x07\0U\n\x08\n\x01\x08\x12\x03\x08\0\"\n\t\n\x02\x08\n\x12\x03\
    \x08\0\"\n\x08\n\x01\x08\x12\x03\t\05\n\t\n\x02\x08\x01\x12\x03\t\05\n\
    \x08\n\x01\x08\x12\x03\n\0\"\n\t\n\x02\x08$\x12\x03\n\0\"\n\n\n\x02\x04\
    \0\x12\x04\x0c\0\x1e\x01\n\n\n\x03\x04\0\x01\x12\x03\x0c\x08\x0e\n/\n\
    \x04\x04\0\x02\0\x12\x03\x0e\x02\x16\x1a\"\x20Status\x20code\x20from\x20\
    internal\x20codes.\n\n\x0c\n\x05\x04\0\x02\0\x06\x12\x03\x0e\x02\x0c\n\
    \x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0e\r\x11\n\x0c\n\x05\x04\0\x02\0\x03\
    \x12\x03\x0e\x14\x15\n1\n\x04\x04\0\x02\x01\x12\x03\x10\x02\x19\x1a$\x20\
    A\x20longer\x20description\x20of\x20the\x20error.\n\n\x0c\n\x05\x04\0\
    \x02\x01\x05\x12\x03\x10\x02\x08\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\
    \x10\t\x14\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x10\x17\x18\n/\n\x04\
    \x04\0\x02\x02\x12\x03\x12\x02\x15\x1a\"\x20More\x20details\x20of\x20the\
    \x20given\x20error.\n\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x12\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x12\t\x10\n\x0c\n\x05\x04\0\x02\
    \x02\x03\x12\x03\x12\x13\x14\nZ\n\x04\x04\0\x02\x03\x12\x03\x15\x02Q\x1a\
    M\x20For\x20some\x20environment\x20we\x20may\x20return\x20a\x20stack\x20\
    trace\x20to\x20help\x20debug\n\x20any\x20issues.\n\n\x0c\n\x05\x04\0\x02\
    \x03\x04\x12\x03\x15\x02\n\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x15\x0b\
    \x11\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x15\x12\x1d\n\x0c\n\x05\x04\0\
    \x02\x03\x03\x12\x03\x15\x20!\n\x0c\n\x05\x04\0\x02\x03\x08\x12\x03\x15\
    \"P\n\x0f\n\x08\x04\0\x02\x03\x08\xc0\xf3\x04\x12\x03\x15#O\n1\n\x04\x04\
    \0\x02\x04\x12\x03\x17\x02\x1f\x1a$\x20specifically\x20for\x20long\x20ru\
    nning\x20jobs\n\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x17\x02\x08\n\x0c\
    \n\x05\x04\0\x02\x04\x01\x12\x03\x17\t\x1a\n\x0c\n\x05\x04\0\x02\x04\x03\
    \x12\x03\x17\x1d\x1e\nL\n\x04\x04\0\x02\x05\x12\x03\x19\x02\x1c\x1a?\x20\
    if\x20status\x20is\x20pending,\x20how\x20much\x20time\x20is\x20remaining\
    \x20(in\x20seconds)\n\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x19\x02\x08\
    \n\x0c\n\x05\x04\0\x02\x05\x01\x12\x03\x19\t\x17\n\x0c\n\x05\x04\0\x02\
    \x05\x03\x12\x03\x19\x1a\x1b\nI\n\x04\x04\0\x02\x06\x12\x03\x1b\x02\x14\
    \x1a<\x20If\x20we\x20want\x20to\x20return\x20a\x20request\x20id\x20in\
    \x20the\x20base\x20status\x20field\n\n\x0c\n\x05\x04\0\x02\x06\x05\x12\
    \x03\x1b\x02\x08\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x1b\t\x0f\n\x0c\n\
    \x05\x04\0\x02\x06\x03\x12\x03\x1b\x12\x13\n^\n\x04\x04\0\x02\x07\x12\
    \x03\x1d\x02M\x1aQ\x20Internal\x20Annotation\x20(do\x20not\x20set\x20in\
    \x20production,\x20for\x20internal\x20Clarifai\x20use\x20only).\n\n\x0c\
    \n\x05\x04\0\x02\x07\x05\x12\x03\x1d\x02\x08\n\x0c\n\x05\x04\0\x02\x07\
    \x01\x12\x03\x1d\t\x19\n\x0c\n\x05\x04\0\x02\x07\x03\x12\x03\x1d\x1c\x1d\
    \n\x0c\n\x05\x04\0\x02\x07\x08\x12\x03\x1d\x1eL\n\x0f\n\x08\x04\0\x02\
    \x07\x08\xc0\xf3\x04\x12\x03\x1d\x1fK\ni\n\x02\x04\x01\x12\x04\"\0$\x01\
    \x1a]\x20Base\x20message\x20to\x20return\x20when\x20there\x20is\x20a\x20\
    internal\x20server\x20error\x20that\n\x20is\x20not\x20caught\x20elsewher\
    e.\n\n\n\n\x03\x04\x01\x01\x12\x03\"\x08\x14\n\x0b\n\x04\x04\x01\x02\0\
    \x12\x03#\x02\x14\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03#\x02\x08\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03#\t\x0f\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03#\x12\x13b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
