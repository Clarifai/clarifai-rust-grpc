// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/clarifai/api/utils/matrix.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

///  Store matrix of uint64s values.
///  It is recommended to store the matrix as a 1D array
///  because it produces less bytes during serialization than a 2D array.
///  The matrix does store the number of columns, but it does not store the number of rows.
///  The number of rows can automatically be calculated as length(data)/n_cols.
#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:MatrixUint64)
pub struct MatrixUint64 {
    // message fields
    ///  Number of columns
    // @@protoc_insertion_point(field:MatrixUint64.n_cols)
    pub n_cols: u64,
    ///  Matrix data stored as an array.
    ///  In order to access matrix element at row i & column j, use data[i*n_cols+j].
    // @@protoc_insertion_point(field:MatrixUint64.data)
    pub data: ::std::vec::Vec<u64>,
    // special fields
    // @@protoc_insertion_point(special_field:MatrixUint64.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MatrixUint64 {
    fn default() -> &'a MatrixUint64 {
        <MatrixUint64 as ::protobuf::Message>::default_instance()
    }
}

impl MatrixUint64 {
    pub fn new() -> MatrixUint64 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "n_cols",
            |m: &MatrixUint64| { &m.n_cols },
            |m: &mut MatrixUint64| { &mut m.n_cols },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "data",
            |m: &MatrixUint64| { &m.data },
            |m: &mut MatrixUint64| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MatrixUint64>(
            "MatrixUint64",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MatrixUint64 {
    const NAME: &'static str = "MatrixUint64";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.n_cols = is.read_uint64()?;
                },
                18 => {
                    is.read_repeated_packed_uint64_into(&mut self.data)?;
                },
                16 => {
                    self.data.push(is.read_uint64()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.n_cols != 0 {
            my_size += ::protobuf::rt::uint64_size(1, self.n_cols);
        }
        for value in &self.data {
            my_size += ::protobuf::rt::uint64_size(2, *value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.n_cols != 0 {
            os.write_uint64(1, self.n_cols)?;
        }
        for v in &self.data {
            os.write_uint64(2, *v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MatrixUint64 {
        MatrixUint64::new()
    }

    fn clear(&mut self) {
        self.n_cols = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MatrixUint64 {
        static instance: MatrixUint64 = MatrixUint64 {
            n_cols: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MatrixUint64 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MatrixUint64").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MatrixUint64 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MatrixUint64 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n%proto/clarifai/api/utils/matrix.proto\"9\n\x0cMatrixUint64\x12\x15\n\
    \x06n_cols\x18\x01\x20\x01(\x04R\x05nCols\x12\x12\n\x04data\x18\x02\x20\
    \x03(\x04R\x04dataB\\\n\x1bcom.clarifai.grpc.api.utilsZ=github.com/Clari\
    fai/clarifai-go-grpc/proto/clarifai/api/utilsJ\x9a\x05\n\x06\x12\x04\0\0\
    \x11\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x08\x12\x03\x02\0T\
    \n\t\n\x02\x08\x0b\x12\x03\x02\0T\n\x08\n\x01\x08\x12\x03\x03\04\n\t\n\
    \x02\x08\x01\x12\x03\x03\04\n\xcd\x02\n\x02\x04\0\x12\x04\n\0\x11\x01\
    \x1a\xc0\x02\x20Store\x20matrix\x20of\x20uint64s\x20values.\n\x20It\x20i\
    s\x20recommended\x20to\x20store\x20the\x20matrix\x20as\x20a\x201D\x20arr\
    ay\n\x20because\x20it\x20produces\x20less\x20bytes\x20during\x20serializ\
    ation\x20than\x20a\x202D\x20array.\n\x20The\x20matrix\x20does\x20store\
    \x20the\x20number\x20of\x20columns,\x20but\x20it\x20does\x20not\x20store\
    \x20the\x20number\x20of\x20rows.\n\x20The\x20number\x20of\x20rows\x20can\
    \x20automatically\x20be\x20calculated\x20as\x20length(data)/n_cols.\n\n\
    \n\n\x03\x04\0\x01\x12\x03\n\x08\x14\n\x20\n\x04\x04\0\x02\0\x12\x03\x0c\
    \x02\x14\x1a\x13\x20Number\x20of\x20columns\n\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x0f\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x0c\x12\x13\n|\n\x04\x04\0\x02\x01\
    \x12\x03\x10\x02\x1b\x1ao\x20Matrix\x20data\x20stored\x20as\x20an\x20arr\
    ay.\n\x20In\x20order\x20to\x20access\x20matrix\x20element\x20at\x20row\
    \x20i\x20&\x20column\x20j,\x20use\x20data[i*n_cols+j].\n\n\x0c\n\x05\x04\
    \0\x02\x01\x04\x12\x03\x10\x02\n\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\
    \x10\x0b\x11\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\x12\x16\n\x0c\n\
    \x05\x04\0\x02\x01\x03\x12\x03\x10\x19\x1ab\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(MatrixUint64::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
