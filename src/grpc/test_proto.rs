// This file is generated by rust-protobuf 3.4.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `proto/clarifai/api/utils/test_proto.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_4_0;

// @@protoc_insertion_point(message:clarifai.api.utils.TestProto)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestProto {
    // message fields
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto.message)
    pub message: ::std::string::String,
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto.value)
    pub value: f64,
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto.image_bytes)
    pub image_bytes: ::std::vec::Vec<u8>,
    // message oneof groups
    pub one_of_field: ::std::option::Option<test_proto::One_of_field>,
    // special fields
    // @@protoc_insertion_point(special_field:clarifai.api.utils.TestProto.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestProto {
    fn default() -> &'a TestProto {
        <TestProto as ::protobuf::Message>::default_instance()
    }
}

impl TestProto {
    pub fn new() -> TestProto {
        ::std::default::Default::default()
    }

    // string string_oneof = 5;

    pub fn string_oneof(&self) -> &str {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::StringOneof(ref v)) => v,
            _ => "",
        }
    }

    pub fn clear_string_oneof(&mut self) {
        self.one_of_field = ::std::option::Option::None;
    }

    pub fn has_string_oneof(&self) -> bool {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::StringOneof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_string_oneof(&mut self, v: ::std::string::String) {
        self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::StringOneof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_string_oneof(&mut self) -> &mut ::std::string::String {
        if let ::std::option::Option::Some(test_proto::One_of_field::StringOneof(_)) = self.one_of_field {
        } else {
            self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::StringOneof(::std::string::String::new()));
        }
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::StringOneof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_string_oneof(&mut self) -> ::std::string::String {
        if self.has_string_oneof() {
            match self.one_of_field.take() {
                ::std::option::Option::Some(test_proto::One_of_field::StringOneof(v)) => v,
                _ => panic!(),
            }
        } else {
            ::std::string::String::new()
        }
    }

    // bool bool_oneof = 6;

    pub fn bool_oneof(&self) -> bool {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::BoolOneof(v)) => v,
            _ => false,
        }
    }

    pub fn clear_bool_oneof(&mut self) {
        self.one_of_field = ::std::option::Option::None;
    }

    pub fn has_bool_oneof(&self) -> bool {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::BoolOneof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_bool_oneof(&mut self, v: bool) {
        self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::BoolOneof(v))
    }

    // .clarifai.api.utils.TestProto2 message_oneof = 7;

    pub fn message_oneof(&self) -> &TestProto2 {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(ref v)) => v,
            _ => <TestProto2 as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_message_oneof(&mut self) {
        self.one_of_field = ::std::option::Option::None;
    }

    pub fn has_message_oneof(&self) -> bool {
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_message_oneof(&mut self, v: TestProto2) {
        self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(v))
    }

    // Mutable pointer to the field.
    pub fn mut_message_oneof(&mut self) -> &mut TestProto2 {
        if let ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(_)) = self.one_of_field {
        } else {
            self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(TestProto2::new()));
        }
        match self.one_of_field {
            ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_message_oneof(&mut self) -> TestProto2 {
        if self.has_message_oneof() {
            match self.one_of_field.take() {
                ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(v)) => v,
                _ => panic!(),
            }
        } else {
            TestProto2::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TestProto| { &m.id },
            |m: &mut TestProto| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "message",
            |m: &TestProto| { &m.message },
            |m: &mut TestProto| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "value",
            |m: &TestProto| { &m.value },
            |m: &mut TestProto| { &mut m.value },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image_bytes",
            |m: &TestProto| { &m.image_bytes },
            |m: &mut TestProto| { &mut m.image_bytes },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_deref_has_get_set_simpler_accessor::<_, _>(
            "string_oneof",
            TestProto::has_string_oneof,
            TestProto::string_oneof,
            TestProto::set_string_oneof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_copy_has_get_set_simpler_accessors::<_, _>(
            "bool_oneof",
            TestProto::has_bool_oneof,
            TestProto::bool_oneof,
            TestProto::set_bool_oneof,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, TestProto2>(
            "message_oneof",
            TestProto::has_message_oneof,
            TestProto::message_oneof,
            TestProto::mut_message_oneof,
            TestProto::set_message_oneof,
        ));
        oneofs.push(test_proto::One_of_field::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestProto>(
            "TestProto",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestProto {
    const NAME: &'static str = "TestProto";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                18 => {
                    self.message = is.read_string()?;
                },
                25 => {
                    self.value = is.read_double()?;
                },
                34 => {
                    self.image_bytes = is.read_bytes()?;
                },
                42 => {
                    self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::StringOneof(is.read_string()?));
                },
                48 => {
                    self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::BoolOneof(is.read_bool()?));
                },
                58 => {
                    self.one_of_field = ::std::option::Option::Some(test_proto::One_of_field::MessageOneof(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.message.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.message);
        }
        if self.value != 0. {
            my_size += 1 + 8;
        }
        if !self.image_bytes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(4, &self.image_bytes);
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field {
            match v {
                &test_proto::One_of_field::StringOneof(ref v) => {
                    my_size += ::protobuf::rt::string_size(5, &v);
                },
                &test_proto::One_of_field::BoolOneof(v) => {
                    my_size += 1 + 1;
                },
                &test_proto::One_of_field::MessageOneof(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.message.is_empty() {
            os.write_string(2, &self.message)?;
        }
        if self.value != 0. {
            os.write_double(3, self.value)?;
        }
        if !self.image_bytes.is_empty() {
            os.write_bytes(4, &self.image_bytes)?;
        }
        if let ::std::option::Option::Some(ref v) = self.one_of_field {
            match v {
                &test_proto::One_of_field::StringOneof(ref v) => {
                    os.write_string(5, v)?;
                },
                &test_proto::One_of_field::BoolOneof(v) => {
                    os.write_bool(6, v)?;
                },
                &test_proto::One_of_field::MessageOneof(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestProto {
        TestProto::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.message.clear();
        self.value = 0.;
        self.image_bytes.clear();
        self.one_of_field = ::std::option::Option::None;
        self.one_of_field = ::std::option::Option::None;
        self.one_of_field = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestProto {
        static instance: TestProto = TestProto {
            id: ::std::string::String::new(),
            message: ::std::string::String::new(),
            value: 0.,
            image_bytes: ::std::vec::Vec::new(),
            one_of_field: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestProto {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestProto").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestProto {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestProto {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `TestProto`
pub mod test_proto {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:clarifai.api.utils.TestProto.one_of_field)
    pub enum One_of_field {
        // @@protoc_insertion_point(oneof_field:clarifai.api.utils.TestProto.string_oneof)
        StringOneof(::std::string::String),
        // @@protoc_insertion_point(oneof_field:clarifai.api.utils.TestProto.bool_oneof)
        BoolOneof(bool),
        // @@protoc_insertion_point(oneof_field:clarifai.api.utils.TestProto.message_oneof)
        MessageOneof(super::TestProto2),
    }

    impl ::protobuf::Oneof for One_of_field {
    }

    impl ::protobuf::OneofFull for One_of_field {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::TestProto as ::protobuf::MessageFull>::descriptor().oneof_by_name("one_of_field").unwrap()).clone()
        }
    }

    impl One_of_field {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<One_of_field>("one_of_field")
        }
    }
}

// @@protoc_insertion_point(message:clarifai.api.utils.TestProto2)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct TestProto2 {
    // message fields
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto2.id)
    pub id: ::std::string::String,
    // @@protoc_insertion_point(field:clarifai.api.utils.TestProto2.flip)
    pub flip: bool,
    // special fields
    // @@protoc_insertion_point(special_field:clarifai.api.utils.TestProto2.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a TestProto2 {
    fn default() -> &'a TestProto2 {
        <TestProto2 as ::protobuf::Message>::default_instance()
    }
}

impl TestProto2 {
    pub fn new() -> TestProto2 {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "id",
            |m: &TestProto2| { &m.id },
            |m: &mut TestProto2| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "flip",
            |m: &TestProto2| { &m.flip },
            |m: &mut TestProto2| { &mut m.flip },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<TestProto2>(
            "TestProto2",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for TestProto2 {
    const NAME: &'static str = "TestProto2";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.id = is.read_string()?;
                },
                16 => {
                    self.flip = is.read_bool()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if self.flip != false {
            my_size += 1 + 1;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if self.flip != false {
            os.write_bool(2, self.flip)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> TestProto2 {
        TestProto2::new()
    }

    fn clear(&mut self) {
        self.id.clear();
        self.flip = false;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static TestProto2 {
        static instance: TestProto2 = TestProto2 {
            id: ::std::string::String::new(),
            flip: false,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for TestProto2 {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("TestProto2").unwrap()).clone()
    }
}

impl ::std::fmt::Display for TestProto2 {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TestProto2 {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n)proto/clarifai/api/utils/test_proto.proto\x12\x12clarifai.api.utils\
    \x1a)proto/clarifai/api/utils/extensions.proto\"\xab\x02\n\tTestProto\
    \x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x121\n\x07message\x18\x02\x20\
    \x01(\tR\x07messageB\x17\x80\xb5\x18\x01\x8a\xb5\x18\x0fprotos\x20are\
    \x20cool\x12\x1d\n\x05value\x18\x03\x20\x01(\x01R\x05valueB\x07\xd5\xb5\
    \x18\0\0\x80?\x12\x1f\n\x0bimage_bytes\x18\x04\x20\x01(\x0cR\nimageBytes\
    \x12#\n\x0cstring_oneof\x18\x05\x20\x01(\tH\0R\x0bstringOneof\x12\x1f\n\
    \nbool_oneof\x18\x06\x20\x01(\x08H\0R\tboolOneof\x12E\n\rmessage_oneof\
    \x18\x07\x20\x01(\x0b2\x1e.clarifai.api.utils.TestProto2H\0R\x0cmessageO\
    neofB\x0e\n\x0cone_of_field\"0\n\nTestProto2\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x12\n\x04flip\x18\x02\x20\x01(\x08R\x04flipBe\n\x1bco\
    m.clarifai.grpc.api.utilsP\x01Z=github.com/Clarifai/clarifai-go-grpc/pro\
    to/clarifai/api/utils\xa2\x02\x04CAIPJ\x85\x06\n\x06\x12\x04\0\0\x1c\x01\
    \n\x08\n\x01\x0c\x12\x03\0\0\x12\n\t\n\x02\x03\0\x12\x03\x02\03\n\x08\n\
    \x01\x02\x12\x03\x04\0\x1b\n\x08\n\x01\x08\x12\x03\x06\0T\n\t\n\x02\x08\
    \x0b\x12\x03\x06\0T\n\x08\n\x01\x08\x12\x03\x07\0\"\n\t\n\x02\x08\n\x12\
    \x03\x07\0\"\n\x08\n\x01\x08\x12\x03\x08\04\n\t\n\x02\x08\x01\x12\x03\
    \x08\04\n\x08\n\x01\x08\x12\x03\t\0\"\n\t\n\x02\x08$\x12\x03\t\0\"\n\n\n\
    \x02\x04\0\x12\x04\x0b\0\x17\x01\n\n\n\x03\x04\0\x01\x12\x03\x0b\x08\x11\
    \n\x0b\n\x04\x04\0\x02\0\x12\x03\x0c\x02\x10\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0c\x02\x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0c\t\x0b\n\x0c\
    \n\x05\x04\0\x02\0\x03\x12\x03\x0c\x0e\x0f\n\x0b\n\x04\x04\0\x02\x01\x12\
    \x03\r\x02`\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\r\x02\x08\n\x0c\n\x05\
    \x04\0\x02\x01\x01\x12\x03\r\t\x10\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \r\x13\x14\n\x0c\n\x05\x04\0\x02\x01\x08\x12\x03\r\x15_\n\x0f\n\x08\x04\
    \0\x02\x01\x08\xd0\x86\x03\x12\x03\r\x165\n\x0f\n\x08\x04\0\x02\x01\x08\
    \xd1\x86\x03\x12\x03\r7^\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x0e\x024\n\
    \x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x0e\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x02\x01\x12\x03\x0e\t\x0e\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x0e\x11\
    \x12\n\x0c\n\x05\x04\0\x02\x02\x08\x12\x03\x0e\x133\n\x0f\n\x08\x04\0\
    \x02\x02\x08\xda\x86\x03\x12\x03\x0e\x142\n\x0b\n\x04\x04\0\x02\x03\x12\
    \x03\x0f\x02\x18\n\x0c\n\x05\x04\0\x02\x03\x05\x12\x03\x0f\x02\x07\n\x0c\
    \n\x05\x04\0\x02\x03\x01\x12\x03\x0f\x08\x13\n\x0c\n\x05\x04\0\x02\x03\
    \x03\x12\x03\x0f\x16\x17\n\x0c\n\x04\x04\0\x08\0\x12\x04\x12\x02\x16\x03\
    \n\x0c\n\x05\x04\0\x08\0\x01\x12\x03\x12\x08\x14\n\x0b\n\x04\x04\0\x02\
    \x04\x12\x03\x13\x04\x1c\n\x0c\n\x05\x04\0\x02\x04\x05\x12\x03\x13\x04\n\
    \n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\x13\x0b\x17\n\x0c\n\x05\x04\0\x02\
    \x04\x03\x12\x03\x13\x1a\x1b\n\x0b\n\x04\x04\0\x02\x05\x12\x03\x14\x04\
    \x18\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\x14\x04\x08\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03\x14\t\x13\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x14\
    \x16\x17\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x15\x04!\n\x0c\n\x05\x04\0\
    \x02\x06\x06\x12\x03\x15\x04\x0e\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\
    \x15\x0f\x1c\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x15\x1f\x20\n\n\n\x02\
    \x04\x01\x12\x04\x19\0\x1c\x01\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x12\
    \n\x0b\n\x04\x04\x01\x02\0\x12\x03\x1a\x02\x10\n\x0c\n\x05\x04\x01\x02\0\
    \x05\x12\x03\x1a\x02\x08\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x1a\t\x0b\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x1a\x0e\x0f\n\x0b\n\x04\x04\x01\
    \x02\x01\x12\x03\x1b\x02\x10\n\x0c\n\x05\x04\x01\x02\x01\x05\x12\x03\x1b\
    \x02\x06\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x1b\x07\x0b\n\x0c\n\x05\
    \x04\x01\x02\x01\x03\x12\x03\x1b\x0e\x0fb\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(1);
            deps.push(super::extensions::file_descriptor().clone());
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(TestProto::generated_message_descriptor_data());
            messages.push(TestProto2::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
